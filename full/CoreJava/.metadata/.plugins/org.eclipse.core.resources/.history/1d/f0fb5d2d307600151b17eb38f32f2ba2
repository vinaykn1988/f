package com.brillio.training.web;

import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;

import com.brillio.training.entity.Product;

@WebFilter(urlPatterns = "/addProduct")
public class CreateProductFilter implements Filter {

	public void destroy() {
	}

	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {

		System.out.println("Inside the CreateProductFilter.doFilter method");

		Product p = new Product();
		boolean proceed = true;

		// set the values of p from request parameters
		try {
			p.setProductId(Integer.parseInt(request.getParameter("productId")));
		} catch (Exception e) {
			proceed = false;
			request.setAttribute("productId", "Invalid product id");
		}

		try {
			p.setSupplierId(Integer.parseInt(request.getParameter("supplierId")));
		} catch (Exception e) {
			proceed = false;
			request.setAttribute("supplierId", "Invalid supplier id");
		}

		try {
			p.setCategoryId(Integer.parseInt(request.getParameter("categoryId")));
		} catch (Exception e) {
			proceed = false;
			request.setAttribute("categoryId", "Invalid category id");
		}

		try {
			p.setUnitsInStock(Integer.parseInt(request.getParameter("unitsInStock")));
		} catch (Exception e) {
			proceed = false;
			request.setAttribute("unitsInStock", "Invalid units in stock");
		}

		try {
			p.setUnitsOnOrder(Integer.parseInt(request.getParameter("unitsOnOrder")));
		} catch (Exception e) {
			proceed = false;
			request.setAttribute("unitsOnOrder", "Invalid units on order");
		}

		try {
			p.setReorderLevel(Integer.parseInt(request.getParameter("reorderLevel")));
		} catch (Exception e) {
			proceed = false;
			request.setAttribute("reorderLevel", "Invalid reorder level");
		}

		try {
			p.setUnitPrice(Double.parseDouble(request.getParameter("unitPrice")));
		} catch (Exception e) {
			proceed = false;
			request.setAttribute("unitPrice", "Invalid unit price");
		}

		p.setProductName(request.getParameter("productName"));
		if (p.getProductName().equals("")) {
			proceed = false;
			request.setAttribute("productName", "product name is required");
		}
		p.setQuantityPerUnit(request.getParameter("quantityPerUnit"));
		p.setDiscontinued(Integer.parseInt(request.getParameter("discontinued")));

		if (proceed) {
			request.setAttribute("product", p);
			chain.doFilter(request, response);
		} else {
			request.getRequestDispatcher("ggproductForm.jsp").forward(request, response);
		}
	}

	public void init(FilterConfig fConfig) throws ServletException {
	}

}
